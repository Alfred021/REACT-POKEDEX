{"version":3,"sources":["serviceWorker.js","images/1066177-ashpokedex2.png","components/infopage.js","api/api.js","storage/storage.js","service/service.js","hooks/pokemonData.js","components/loading.js","components/home.js","hooks/pokemonList.js","components/pokemon-preview.js","components/list.js","images/pokemon-23-logo-png-transparent.png","components/main.js","index.js"],"names":["Boolean","window","location","hostname","match","Info","className","alt","src","pokedex","getPokemon","name","a","fetch","apiResp","json","getPokemonList","page","savePokemonListOnStorage","pokemon","localStorage","setItem","JSON","stringify","e","clear","getPokemonListFromStorage","pokemonList","parse","getItem","Error","savePokemonOnStorage","undefined","getPokemonFromStorage","pokemonInfo","getPokemonFromList","getPokemonInfo","GetPokemonData","pokemonName","useState","setPokemon","loading","setLoading","error","setError","useEffect","data","Loading","Home","useParams","map","result","id","sprites","front_default","height","weight","types","type","abilities","ability","stats","slice","stat","base_stat","GetPokemons","pokemons","setPokemons","setPage","info","Preview","List","style","results","to","onClick","Main","displayModal","setDisplayModal","searchTerm","setSearchTerm","setPokemonName","logo","placeholder","onChange","target","value","toLowerCase","path","exact","href","rel","width","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.13ad40f9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/1066177-ashpokedex2.266217a8.png\";","import pokedex from '../images/1066177-ashpokedex2.png';\r\nimport '../app-css/info.css';\r\n\r\nconst Info = () => {\r\n    return (\r\n        <section className=\"pokedex-info\">\r\n            <div className=\"intro\">\r\n                <h2>Pokédex</h2>\r\n                <p>The Pokédex (ポケモン図鑑 Pokemon Zukan) is an electronic device designed to catalogue and provide information regarding the various species of Pokémon featured in the Pokémon video game, anime and manga series. The name Pokédex is a neologism including \"Pokémon\" (which itself is a portmanteau of \"pocket\" and \"monster\") and \"index\". The Japanese name is simply \"Pokémon Encyclopedia\", as it can feature every Pokémon on it, depending on the Pokédex.</p>\r\n            </div>\r\n\r\n            <div className=\"pokedex-image-container\">\r\n                <figure className=\"pokedex-figure\">\r\n                    <img alt=\"pokedex\" src={pokedex}></img>\r\n                    <figcaption>\r\n                        Kanto Pokedex\r\n                    </figcaption>\r\n                </figure>\r\n            </div>\r\n            \r\n            <div className=\"features\">\r\n                <h3>Features</h3>\r\n                <h4>The Pokédex can...</h4>\r\n\r\n                <ul>\r\n                    <li>Identify Pokémon</li>\r\n                    <li>Scan Poké Balls (Sinnoh, anime)</li>\r\n                    <li>Identify battle moves</li>\r\n                    <li>Show where to capture Pokémon (in-game)</li>\r\n                </ul>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Info\r\n","export const getPokemon = async (name) => {\r\n    const apiResp = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}/`)\r\n    return apiResp.json()\r\n}\r\n\r\nexport const getPokemonList = async (page = 0) => {\r\n    const apiResp = await fetch(`https://pokeapi.co/api/v2/pokemon/?offset=${page}&limit=20`)\r\n    return apiResp.json()\r\n}\r\n\r\n\r\n\r\n\r\n","export const savePokemonListOnStorage = (page, pokemon) => {\r\n    try {\r\n        localStorage.setItem(page, JSON.stringify(pokemon))\r\n    } catch(e) {\r\n        localStorage.clear()\r\n        localStorage.setItem(page, JSON.stringify(pokemon))\r\n    }\r\n}\r\n\r\nexport const getPokemonListFromStorage = (page) => {\r\n    const pokemonList = JSON.parse(localStorage.getItem(page))\r\n    if (pokemonList === null) {\r\n        throw new Error(\"Pokemon List not found in Storage\")\r\n    }\r\n    return pokemonList\r\n}\r\n\r\nexport const savePokemonOnStorage = (name, pokemon) => {\r\n    if (name === undefined) {\r\n        throw new Error(\"Pokemon Name can't be undefined\")\r\n    }\r\n    \r\n    try {\r\n        localStorage.setItem(name, JSON.stringify(pokemon))\r\n    } catch(e) {\r\n        localStorage.clear()\r\n        localStorage.setItem(name, JSON.stringify(pokemon))\r\n    }\r\n}\r\n\r\nexport const getPokemonFromStorage = (name) => {\r\n   const pokemonInfo = JSON.parse(localStorage.getItem(name));\r\n   if (pokemonInfo === null) {\r\n       throw new Error(\"Pokemon Info not found in Storage\")\r\n   }\r\n   return pokemonInfo;\r\n}\r\n","import { getPokemon, getPokemonList } from '../api/api.js';\r\nimport { \r\n    savePokemonListOnStorage,\r\n    savePokemonOnStorage, \r\n    getPokemonFromStorage, \r\n    getPokemonListFromStorage \r\n    } from '../storage/storage.js';\r\n\r\nexport const getPokemonFromList = async (page) => {\r\n    try {\r\n        return getPokemonListFromStorage(\"page \" + page)\r\n    } catch(e) {\r\n        const pokemonList = await getPokemonList(page)\r\n        savePokemonListOnStorage(\"page \" + page, pokemonList)\r\n        return pokemonList;\r\n    }  \r\n}\r\n\r\nexport const getPokemonInfo = async (name) => {\r\n    try {\r\n        return getPokemonFromStorage(name)\r\n    } catch (e) {\r\n        let pokemon = await getPokemon(name)\r\n        savePokemonOnStorage(name, pokemon)\r\n        return pokemon;\r\n    }\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getPokemonInfo } from '../service/service.js';\r\n\r\nconst GetPokemonData = (pokemonName) => {\r\n    const [pokemon, setPokemon] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const data = async () => {\r\n            if (pokemonName) {\r\n                setLoading(true);\r\n                setError(null)\r\n                setPokemon(null)\r\n\r\n            try {\r\n                const data = await getPokemonInfo(pokemonName)\r\n                setPokemon([data]);\r\n            } catch(error) {\r\n                setError(error)\r\n            }\r\n                setLoading(false)\r\n            } else {\r\n                setPokemon(null)\r\n                setError(null)\r\n            }\r\n        }\r\n        data();\r\n    }, [pokemonName])\r\n\r\n    return { pokemon, loading, error };\r\n}\r\n\r\nexport default GetPokemonData;\r\n","import '../app-css/loading.css';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <section className=\"loading\">\r\n            <h1>Loading...</h1>\r\n            <div className=\"spin\"></div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Loading;\r\n","import GetPokemonData from '../hooks/pokemonData.js';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../app-css/pokemon.css';\r\nimport Loading from './loading.js'\r\n\r\nconst Home = () => { \r\n    const { name } = useParams();\r\n    const { pokemon, loading, error } = GetPokemonData(name)\r\n\r\n    return (\r\n        <>  \r\n        \r\n            <section className=\"pokemon-body\">\r\n\r\n            {loading && <Loading/>}\r\n\r\n            {error && (\r\n                <div className=\"error-container\">\r\n                    <h3 className=\"error-title\">No Pokémon matched your search</h3>\r\n                    <p className=\"error-text sub-title\">Try these suggestions to find a pokemon</p>\r\n                    <ul className=\"suggestions\">\r\n                        <li><p className=\"error-text\">Reduce the number of search characters</p></li>\r\n                        <li><p className=\"error-text\">Search only for one pokemon at a time</p></li>\r\n                        <li><p className=\"error-text\">Do not type special characters, only letters or numbers (not both at the same time)</p></li>\r\n                        <li><p className=\"error-text\">If you know the Pokemon's ID, you can type the number on the search box</p></li>\r\n                    </ul>\r\n                </div>\r\n            )}\r\n            \r\n            {pokemon && (\r\n                <>\r\n                {pokemon.map((result) => {\r\n                    return (\r\n                        <>\r\n                    <div className=\"pokemon-card\">\r\n                        <p><b>{`No.${result.id} ${result.name}`}</b></p>\r\n                        <div className=\"pokemon-image-container\">\r\n                            <img className=\"pokemon-image\" src={result.sprites.front_default} alt=\"pokemon\"></img>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"pokemon-info\">\r\n                        <div className=\"pokemon-attributes\">\r\n                            <div className=\"attributes-column-1\">\r\n                                <ul className=\"attibutes-list-1\">\r\n                                    <li>\r\n                                        <p className=\"attribute-title\">Height</p>\r\n                                        <span className=\"attribute-value\">{`${result.height / 10} m`}</span>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <p className=\"attribute-title\">Weight</p>\r\n                                        <span className=\"attribute-value\">{`${result.weight / 10} kg`}</span>\r\n                                    </li>\r\n\r\n                                    <li>\r\n                                        <p className=\"attribute-title\">Types: </p>\r\n                                        <ul className=\"attibutes-list-1\">\r\n                                        {result.types.map((type) => {\r\n                                            return (\r\n                                            <li className=\"types\">\r\n                                                <p className={type.type.name}>{type.type.name}</p>\r\n                                            </li>\r\n                                            )\r\n                                        })}\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n\r\n                            <div className=\"attributes-column-2\">\r\n                                <ul className=\"attibutes-list-2\">\r\n                                    <li>\r\n                                <p className=\"attribute-title\">Skills:</p>\r\n                                    {result.abilities.map((ability) => {\r\n                                        return (\r\n                                            <p className=\"skill\">{ability.ability.name}</p>\r\n                                        )\r\n                                    })}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    \r\n\r\n                        <div className=\"pokemon-stats\">\r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Base Stats</th> \r\n                                    </tr>   \r\n                                </thead>\r\n                                <tbody>\r\n                                <tr>\r\n                                    {result.stats.slice(0, 2).map((stat) => {\r\n                                        return (\r\n                                       <td>\r\n                                           <p>{stat.stat.name}</p>\r\n                                           <p>{stat.base_stat}</p>\r\n                                        </td> \r\n                                       )\r\n                                    })}\r\n                                </tr>\r\n                                                                  \r\n                                <tr>\r\n                                    {result.stats.slice(2, 4).map((stat) => {\r\n                                        return (\r\n                                        <td>\r\n                                           <p>{stat.stat.name}</p>\r\n                                           <p>{stat.base_stat}</p>\r\n                                        </td> \r\n                                       )\r\n                                    })}\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    {result.stats.slice(4, 6).map((stat) => {\r\n                                        return (\r\n                                        <td>\r\n                                           <p>{stat.stat.name}</p>\r\n                                           <p>{stat.base_stat}</p>\r\n                                        </td> \r\n                                       )\r\n                                    })}\r\n                                </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    </>\r\n                    )\r\n                })}\r\n                </>\r\n            )}     \r\n        </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import { useEffect, useState } from 'react';\r\nimport { getPokemonFromList } from '../service/service.js';\r\n\r\nconst GetPokemons = () => {\r\n    const [pokemons, setPokemons] = useState(null);\r\n    const [page, setPage] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const pokemonList = async () => {\r\n            if (page >= 0) {\r\n                setLoading(true)\r\n                setError(null)\r\n                setPokemons(null)\r\n                try {\r\n                    const info = await getPokemonFromList(page)\r\n                    setPokemons(info)\r\n                } catch(error) {\r\n                    setError(error)\r\n                }\r\n                setLoading(false)\r\n            } else {\r\n                setPokemons(null)\r\n                setError(null)\r\n            }            \r\n        }\r\n        pokemonList();   \r\n    }, [page])\r\n\r\n    return { pokemons, setPage, page, error, loading }\r\n}\r\n\r\nexport default GetPokemons\r\n","import GetPokemonData from '../hooks/pokemonData.js';\r\nimport Loading from './loading.js'\r\n\r\nconst Preview = ({name}) => {\r\n    const { pokemon, loading } = GetPokemonData(name)\r\n\r\n    return (\r\n        <>\r\n\r\n        <div>\r\n\r\n        {loading && <Loading/>}\r\n\r\n        {pokemon && (   \r\n            <>\r\n                {pokemon.map((result) => {\r\n                    return (\r\n                    <>\r\n                    <figure className=\"preview-figure\">\r\n                        <img className=\"pokemon-pic\" alt={result.name} src={result.sprites.front_default}></img>\r\n                    </figure>\r\n                    <h5 className=\"pokemon-name\">{`#${result.id } ${result.name}`}</h5>  \r\n                    </>\r\n                    )\r\n                })}\r\n            </>\r\n        )}\r\n        </div> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import GetPokemons from '../hooks/pokemonList.js';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Preview from './pokemon-preview.js';\r\nimport '../app-css/results.css';\r\nimport Loading from './loading.js'\r\n\r\nconst List = () => {\r\n    const { pokemons, setPage, page, error, loading } = GetPokemons();\r\n\r\n    const nextPage = () => {\r\n        return setPage(page => page + 20)\r\n    }\r\n\r\n    const prevPage = () => {\r\n        return page === 0 ? setPage(0) : setPage(page => page - 20)\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n        <section className=\"pokemon-results\">\r\n\r\n        <ul className=\"results\" style={{\"height\" : \"auto\"}}>\r\n            {loading && <Loading/>}\r\n\r\n            {error && (\r\n                <div className=\"error-container\">\r\n                    <h3 className=\"error-title\">Something when wrong, please try again</h3>\r\n                    <p className=\"error-text sub-title\">Please return to the previous page or reload the page</p>\r\n                </div>\r\n            )}\r\n\r\n            {pokemons && (\r\n                    <>\r\n            {pokemons.results.map((result) => {\r\n                    return (            \r\n                            <li className=\"list\" key={result.name}>\r\n                                <NavLink className=\"link-to-pokemon\" to={`/pokemon/${result.name}`}>\r\n                                    <Preview name={result.name}/> \r\n                                </NavLink>\r\n                            </li>         \r\n                    )\r\n                })}\r\n                </> \r\n            )\r\n            }\r\n             </ul>\r\n        </section>\r\n        \r\n        <section className=\"pagination\">\r\n            <div className=\"navigate-pages\">\r\n                <span onClick={prevPage}>Prev</span>\r\n                <span onClick={nextPage}>Next</span>\r\n            </div>\r\n        </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default List\r\n","export default __webpack_public_path__ + \"static/media/pokemon-23-logo-png-transparent.d42d0e59.png\";","import React, { useState } from 'react';\r\nimport { HashRouter as Router, Route, Switch, NavLink} from 'react-router-dom';\r\nimport Info from './infopage.js';\r\nimport '../app-css/main.css'\r\nimport Home from './home.js';\r\nimport List from './list.js';\r\nimport logo from '../images/pokemon-23-logo-png-transparent.png'\r\nimport Loading from './loading.js'\r\n\r\nconst Main = () => {\r\n    const [displayModal, setDisplayModal] = useState(false)\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n    const [pokemonName, setPokemonName] = useState(\"\");\r\n\r\n    return (\r\n        <Router>\r\n            <div className={`modal ${displayModal ? \"show\": \"\"}`}>\r\n                <div>\r\n                    <h3>Menu</h3>\r\n                    <button className=\"close\" onClick={() => setDisplayModal(false)}>\r\n                        X\r\n                    </button>\r\n                </div>\r\n                <ul style={{\"listStyleType\" : \"none\"}}>\r\n                    <li><NavLink className=\"section\" to=\"/info\">Info</NavLink></li>\r\n                    <li><NavLink className=\"section\" to=\"/\">List</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        <header>\r\n            <div className=\"menu\">\r\n                <button className=\"menu-button\" type=\"button\" onClick={() => setDisplayModal(true)}>Menu</button>\r\n            </div>\r\n\r\n            \r\n            <NavLink to=\"/\">\r\n                <img className=\"title\" alt=\"Pokedex\" src={logo}></img>\r\n            </NavLink>\r\n            \r\n\r\n            <div className=\"search-bar\">  \r\n                    <input className=\"search-input\" type=\"search\" placeholder=\"Search Pokemon\" onChange={(e) => setSearchTerm(e.target.value)} value={searchTerm}></input>    \r\n                    <NavLink to={`/pokemon/${searchTerm.toLowerCase()}`}> \r\n                    <button className=\"search-button\" type=\"button\" onClick={() => setPokemonName(searchTerm.toLowerCase())}>Search</button>\r\n                    </NavLink>\r\n            </div>\r\n        </header>\r\n\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <List/>\r\n            </Route>\r\n\r\n            <Route path='/pokemon/:name' exact>\r\n                <Home />\r\n            </Route>\r\n\r\n            <Route path=\"/info\" exact>\r\n                <Info/>\r\n            </Route>\r\n        </Switch>\r\n        <div className={`overlay ${displayModal ? \"show\": \"\"}`}\r\n        onClick={() => setDisplayModal(false)}\r\n        ></div>\r\n        <footer>\r\n            <div className=\"navigation\">\r\n                <span>Navigate: </span>\r\n                <span><NavLink className=\"navigation-link\" to=\"/info\">Info </NavLink></span>\r\n                <span><NavLink className=\"navigation-link\" to=\"/\">List </NavLink></span>\r\n            </div>\r\n            \r\n            <div className=\"logos\">\r\n                <a href=\"https://github.com/Alfred021/React-Pokedex\" target=\"_blank\" rel=\"noreferrer\"><span><img className=\"logo-image\" alt=\"github\" src=\"https://cdns.iconmonstr.com/wp-content/assets/preview/2012/240/iconmonstr-github-1.png\" width=\"35px\" height=\"35px\"></img></span></a>\r\n                <a href=\"https://www.linkedin.com/in/alfredo-david-medina-lugo-177b461b4/\" target=\"_blank\" rel=\"noreferrer\"><span><img className=\"logo-image\" alt=\"linkedin\" src=\"https://cdn4.iconfinder.com/data/icons/social-messaging-ui-color-shapes-2-free/128/social-linkedin-circle-512.png\" width=\"35px\" height=\"35px\"></img></span></a>\r\n                <a href=\"mailto: alfred.med.barca.9@gmail.com\"><span><img className=\"logo-image\" alt=\"email\" src=\"https://icons-for-free.com/iconfiles/png/512/mail+message+new+send+icon-1320166532032442575.png\" width=\"35px\" height=\"35px\"></img></span></a>\r\n            </div>\r\n        </footer>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './components/main.js';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}